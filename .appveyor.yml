version: '{build}'
pull_requests:
  do_not_increment_build_number: true
max_jobs: 1
#clone_depth: 5
branches:
  only:
  - master
#build:
#  verbosity: minimal

environment:
  # au job parameters
  au_version: master
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1
  # Github credentials - used to save result to gist and to commit pushed packages to the git repository
  github_user_repo: 'AdmiringWorm/chocolatey-packages'
  github_api_key:
    secure: pmwNf8f5uDVc1IdjM+mRpfMsYW6dieBT0znGf6NRUCjE+9LyWUYSQqVcRNPafSx6

  # The gitter webhook to use to publish messages
  gitter_webhook:
    secure: IdcwkBrgIxM2NDj1oTyiuxWBAyCHs63PlFOtIe9qqXWFqJj/GmrkELVnRkH8NGHV/m7wRpUiJyctzHNFb5TuHg==

  mail_user:
    secure: XNJ3ZGH/Nr6Vd7Y5CNCTyISBPfWh8CYm6+htpmgQH+c=
  mail_pass:
    secure: OrQGWbrOhkF1zwioZaDt35EmysMHVFJRdWeR7axzzhE=
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: true
  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  gist_id: 747b3ede98c9404e5cb6a399595e7ad1
  gist_id_test: 30a8b66d4c02ecacce2da3c8734ac61f
  api_key:
    secure: CzGGbCfsVKyCTbY193kYveGQDN5ilsyI30J3FYdo9+IpGsDwi/knjzBqCQbztIzY

init:
- git config --global user.email "chocolatey@realdimensions.net"
- git config --global user.name "Chocolatey"
- git config --global core.safecrlf false

install:
- ps: 'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version'
- ps: $PSVersionTable
- git --version
- ps: |
    git clone -q https://github.com/AdmiringWorm/au.git $Env:TEMP/au --branch $Env:au_version
    . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

- ps: |
    "Build info"
    '  {0,-20} {1}' -f 'SCHEDULED BUILD:', ($Env:APPVEYOR_SCHEDULED_BUILD -eq 'true')
    '  {0,-20} {1}' -f 'FORCED BUILD:'   , ($Env:APPVEYOR_FORCED_BUILD    -eq 'true')
    '  {0,-20} {1}' -f 'RE BUILD:'       , ($Env:APPVEYOR_RE_BUILD        -eq 'true')

build_script:
- ps: |
    $ErrorActionPreference = 'Continue'
    if ($Env:APPVEYOR_PROJECT_NAME  -like '*test*') { ./test_all.ps1 "random $Env:au_test_groups"; return }
    if (($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne $null) -and ($Env:APPVEYOR_PULL_REQUEST_NUMBER -ne '')) {
      ./scripts/Test-RepoPackage.ps1 -CleanFiles -TakeScreenshots
      return
    } else {
      # Clean the choco logs as it's quite large
      rm "$env:ChocolateyInstall\logs\*.log"
    }
    if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
        switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE)
        {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }
            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir; choco pack; Push-Package; popd
                }
                return
            }
        }
    }
    ./update_all.ps1 -ForcedPackages $forced

on_finish:
- ps: |
    7z a -mx9 choco_logs.7z "$Env:ChocolateyInstall\logs\*"
    Push-AppveyorArtifact choco_logs.7z
    if (Test-Path $Env:TEMP\chocolatey\au) { 7z a -mx9 au_temp.7z $Env:TEMP\chocolatey\au\* ; Push-AppveyorArtifact au_temp.7z }
    if (Test-Path update_info.xml) { Push-AppveyorArtifact update_info.xml }
    if (Test-Path Update-AUPackages.md) { Push-AppveyorArtifact Update-AUPackages.md }
